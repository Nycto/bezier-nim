Bezier	bezier.html#Bezier	bezier: Bezier	
DynBezier	bezier.html#DynBezier	bezier: DynBezier	
LUT	bezier.html#LUT	bezier: LUT	
newBezier	bezier.html#newBezier,varargs[Vec2]	bezier: newBezier[N](points: varargs[Vec2]): Bezier[N]	
newDynBezier	bezier.html#newDynBezier,varargs[Vec2]	bezier: newDynBezier(points: varargs[Vec2]): DynBezier	
order	bezier.html#order,DynBezier	bezier: order(curve: DynBezier): Natural	
order	bezier.html#order,Bezier[N]	bezier: order[N](curve: Bezier[N]): Natural	
`$`	bezier.html#$	bezier: `$`(curve: Bezier | DynBezier): string	
`[]`	bezier.html#[],Bezier[N],range[]	bezier: `[]`[N](curve: Bezier[N]; point: range[0 .. N]): Vec2	
`[]`	bezier.html#[],DynBezier,Natural	bezier: `[]`(curve: DynBezier; point: Natural): Vec2	
pairs	bezier.html#pairs.i	bezier: pairs(curve: DynBezier | Bezier): (int, Vec2)	
items	bezier.html#items.i	bezier: items(curve: DynBezier | Bezier): lent Vec2	
mapIt	bezier.html#mapIt.t,Bezier[N],untyped	bezier: mapIt[N](curve: Bezier[N]; mapper: untyped): Bezier[N]	
mapIt	bezier.html#mapIt.t,DynBezier,untyped	bezier: mapIt(curve: DynBezier; mapper: untyped): DynBezier	
compute	bezier.html#compute,Bezier[N],float	bezier: compute[N](curve: Bezier[N]; t: float): Vec2	
compute	bezier.html#compute,DynBezier,float	bezier: compute(curve: DynBezier; t: float): Vec2	
xs	bezier.html#xs,Bezier[N]	bezier: xs[N](curve: Bezier[N]): array[N + 1, float32]	
xs	bezier.html#xs,DynBezier	bezier: xs(curve: DynBezier): seq[float32]	
ys	bezier.html#ys,Bezier[N]	bezier: ys[N](curve: Bezier[N]): array[N + 1, float32]	
ys	bezier.html#ys,DynBezier	bezier: ys(curve: DynBezier): seq[float32]	
derivative	bezier.html#derivative,Bezier[N]	bezier: derivative[N](curve: Bezier[N]): auto	
derivative	bezier.html#derivative,DynBezier	bezier: derivative(curve: DynBezier): DynBezier	
extrema	bezier.html#extrema.i,Bezier[N]	bezier: extrema[N](curve: Bezier[N]): float32	
extrema	bezier.html#extrema.i,DynBezier	bezier: extrema(curve: DynBezier): float32	
boundingBox	bezier.html#boundingBox	bezier: boundingBox(curve: Bezier | DynBezier): tuple[minX, minY, maxX, maxY: float32]	
align	bezier.html#align,,Vec2,Vec2	bezier: align(curve: Bezier | DynBezier; p1, p2: Vec2): auto	
tightBoundingBox	bezier.html#tightBoundingBox	bezier: tightBoundingBox(curve: Bezier | DynBezier): array[4, Vec2]	
findY	bezier.html#findY.i,,float	bezier: findY(curve: Bezier | DynBezier; x: float): Vec2	
points	bezier.html#points.i,,range[]	bezier: points(curve: Bezier | DynBezier; steps: range[2 .. high(int)]): tuple[t: float,\n    point: Vec2]	
segments	bezier.html#segments.i,,Positive	bezier: segments(curve: Bezier | DynBezier; steps: Positive): (Vec2, Vec2)	
tangent	bezier.html#tangent,,float	bezier: tangent(curve: Bezier | DynBezier; t: float): Vec2	
normal	bezier.html#normal,,float	bezier: normal(curve: Bezier | DynBezier; t: float): Vec2	
intersects	bezier.html#intersects.i,,Vec2,Vec2	bezier: intersects(curve: Bezier | DynBezier; p1, p2: Vec2): Vec2	
split	bezier.html#split,Bezier[N],float	bezier: split[N](curve: Bezier[N]; t: float): (Bezier[N], Bezier[N])	
split	bezier.html#split,DynBezier,float	bezier: split(curve: DynBezier; t: float): (DynBezier, DynBezier)	
length	bezier.html#length	bezier: length(curve: Bezier | DynBezier): float	
approxLen	bezier.html#approxLen,,Positive	bezier: approxLen(curve: Bezier | DynBezier; steps: Positive): float	
lut	bezier.html#lut,T,range[]	bezier: lut[T: Bezier | DynBezier](curve: T; steps: range[2 .. high(int)]): LUT[T]	
project	bezier.html#project,LUT[T],Vec2	bezier: project[T](lut: LUT[T]; point: Vec2): float	
approxLen	bezier.html#approxLen,LUT[T]	bezier: approxLen[T](lut: LUT[T]): float	
intervals	bezier.html#intervals.i,LUT[T],Positive	bezier: intervals[T](lut: LUT[T]; steps: Positive): Vec2	
